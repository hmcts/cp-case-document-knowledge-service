plugins {
    id 'application'
    id 'java'

    id 'org.springframework.boot' version '4.0.0-M3'
    id 'io.spring.dependency-management' version '1.1.7'

    id 'jacoco'
    id 'pmd'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'org.cyclonedx.bom' version '3.0.0'
    id 'au.com.dius.pact' version '4.6.17'
    id 'com.gorylenko.gradle-git-properties' version '2.5.3'
    id 'com.avast.gradle.docker-compose' version '0.17.16'
}

group = 'uk.gov.hmcts.cp'
version = System.getProperty('ARTEFACT_VERSION') ?: '0.0.999'

// ---- Repos (single place) ----
repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://repo.spring.io/milestone" }  // Boot 4 M*
    maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}

// ---- Java toolchain ----
java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

// ---- Source sets ----
sourceSets {
    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'
        compileClasspath += sourceSets.main.output + configurations.integrationTestCompileClasspath
        runtimeClasspath += sourceSets.main.output + configurations.integrationTestRuntimeClasspath
    }
    pactVerificationTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
        resources.srcDir 'src/pactVerificationTest/resources'
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    // resolvable to locate agents, etc.
    testRuntimeClasspath { canBeResolved = true }
}

// ---- Versions you control ----
ext {
    lombokVersion = "1.18.42"
    apiSpecVersion = "0.4.2"
    testcontainersBom = "1.21.3"
    cdk = "0.0.4-53758be"
    mapstruct = "1.6.3"
}

// ---- Dependencies ----
dependencies {
    // Domain API contract (generated interfaces/models)
    implementation "uk.gov.hmcts.cp:api-cp-crime-caseadmin-case-document-knowledge:$cdk"

    // MapStruct
    implementation "org.mapstruct:mapstruct:$mapstruct"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct"

    // Web / validation
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Observability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-opentelemetry'

    // OpenAPI UI (Boot 4 compatible)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:3.0.0-M1'
    // Align with Boot 4 (Jackson 3). Let Boot BOM manage versions:
    implementation 'tools.jackson.module:jackson-module-kotlin'

    // Data / DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Logging / utils
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j'
    implementation 'org.apache.commons:commons-text:1.14.0'

    // JWT (keep only if used directly)
    implementation 'io.jsonwebtoken:jjwt:0.13.0'

    // Lombok for handwritten code
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'

    // Testcontainers (BOM-managed)
    testImplementation platform("org.testcontainers:testcontainers-bom:$testcontainersBom")
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'

    testImplementation 'io.rest-assured:rest-assured:5.5.6'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// ---- Spring Boot build info ----
springBoot {
    buildInfo {
        properties {
            name = project.name
            version = project.version.toString()
        }
    }
}

// ---- PMD ----
pmd {
    ruleSets = []
    ruleSetFiles = files(".github/pmd-ruleset.xml")
    ignoreFailures = false
}
tasks.withType(Pmd).configureEach {
    reports { xml.required.set(true); html.required.set(true) }
}
tasks.named("pmdMain").configure { onlyIf { gradle.startParameter.taskNames.contains(name) } }
tasks.named("pmdTest").configure { enabled = false }
tasks.named("pmdIntegrationTest").configure { enabled = false }

// ---- Versions check policy ----
tasks.named("dependencyUpdates").configure {
    def isNonStable = { String v ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { q -> v.toUpperCase().contains(q) }
        def regex = /^[0-9,.v-]+$/
        !stableKeyword && !(v ==~ regex)
    }
    rejectVersionIf { isNonStable(candidate.version) && !isNonStable(currentVersion) }
}

// ---- SBOM ----
cyclonedxBom {
    includeConfigs = ["runtimeClasspath"]
    skipConfigs = ["compileClasspath", "testImplementation", "testCompileClasspath", "testRuntimeClasspath"]
    schemaVersion = "1.6"
    componentVersion = providers.provider { project.version.toString() }
    destination = layout.buildDirectory.dir("reports").get().asFile
}

// ---- Reproducible archives ----
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// ---- JARs ----
jar {
    enabled = true
    archiveClassifier.set('plain')
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version.toString()
        )
    }
    if (file("CHANGELOG.md").exists()) {
        from('CHANGELOG.md') { into 'META-INF' }
    } else {
        println "⚠️  CHANGELOG.md not found, skipping inclusion in JAR"
    }
}

bootJar {
    archiveFileName = "${rootProject.name}-${project.version}.jar"
    manifest { attributes('Implementation-Version': project.version.toString()) }
}

// ---- Application entrypoint ----
application {
    mainClass = 'uk.gov.hmcts.cp.cdk.Application'
}

// ---- Tests ----
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty 'API_SPEC_VERSION', project.version
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.named('test') {
    failFast = true
    // Mockito javaagent (only if you use inline mocking / final classes and see warnings)
    jvmArgs += [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }}",
            "-Xshare:off"
    ]
}

// ---- Jacoco ----
jacoco { toolVersion = "0.8.12" }
tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    executionData fileTree(dir: layout.buildDirectory.dir("jacoco").get().asFile, include: ["*.exec"])
    reports { xml.required.set(true); csv.required.set(false); html.required.set(true) }
}

// ---- Docker Compose ITs ----
tasks.named('composeBuild') { dependsOn tasks.named('bootJar') }

dockerCompose {
    useComposeFiles = ['docker/docker-compose.integration.yml']
    startedServices = ['db', 'app']
    buildBeforeUp = true
    waitForTcpPorts = true
    upAdditionalArgs = ['--wait', '--wait-timeout', '120']

    captureContainersOutput = true
    removeOrphans = true
    stopContainers = true
    removeContainers = true

    projectName = "${rootProject.name}-it".replaceAll('[^A-Za-z0-9]', '')
    useDockerComposeV2 = true
    dockerExecutable = 'docker'
}

tasks.register('integration', Test) {
    description = "Runs integration tests against docker-compose stack"
    group = "Verification"
    mustRunAfter tasks.named('test')

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()

    dependsOn tasks.composeUp
    finalizedBy tasks.composeDown

    systemProperty 'app.baseUrl', 'http://localhost:8082/casedocumentknowledge-service'
    jvmArgs = ['-Xshare:off']
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

tasks.named('processIntegrationTestResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('build') {
    dependsOn tasks.named('test'), tasks.named('integration')
}

tasks.named('check') {
    dependsOn tasks.named('integration')
}

// ---- Publishing ----
def githubActor = project.findProperty("github.actor") ?: System.getenv("GITHUB_ACTOR")
def githubToken = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
def githubRepo = System.getenv("GITHUB_REPOSITORY")
def azureADOArtifactRepository = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
def azureADOArtifactActor = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
def azureADOArtifactToken = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(tasks.named('bootJar'))
            artifact(tasks.named('jar'))
            pom {
                name = project.name
                description = "Case Document Knowledge Service"
                url = "https://github.com/${githubRepo ?: 'org/repo'}"
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/${githubRepo ?: ''}")
            credentials { username = githubActor; password = githubToken }
        }
        maven {
            name = "AzureArtifacts"
            url = uri(azureADOArtifactRepository)
            credentials { username = azureADOArtifactActor; password = azureADOArtifactToken }
        }
    }
}

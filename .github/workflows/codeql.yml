name: CodeQL

on:
  pull_request:
    branches:
      - master
      - main

  schedule:
    - cron: '36 5 * * 4'

jobs:
#  Artefact-Version:
#    runs-on: ubuntu-latest
#    outputs:
#      artefact_version: ${{ github.event_name == 'push' && steps.artefact.outputs.release_version || steps.artefact.outputs.draft_version }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v5
#        with:
#          fetch-depth: 0
#
#      - name: Generate Artefact Version
#        id: artefact
#        uses: hmcts/artefact-version-action@v1
#        with:
#          release: ${{ inputs.is_release }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
        language: [ 'java' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: current

      - name: Gradle Build
        run: |
          gradle build cyclonedxBom -x test

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      #   If the (auto)build fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

      - name: Log generated SBOM Hash
        run: sha256sum build/resources/main/META-INF/sbom/application.cdx.json || true

        # This ensures:
        # - The SBOM is archived with the CodeQL scan output
        # - It's available to download and inspect from the GitHub Actions UI
      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: build/resources/main/META-INF/sbom/application.cdx.json

  DAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Gradle Build
        run: gradle build -x test

      - name: DAST - Build and run containerised app
        run: |
          docker compose -f docker/docker-compose.integration.yml up -d
          
          echo "Waiting for health endpoint..."
          for i in {1..30}; do
            if curl -s http://localhost:8082/health > /dev/null; then
              echo "App is healthy"
              break
            fi
            echo "Waiting for app to be healthy ($i)..."
            sleep 2
          done

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: current

      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://localhost:8082"
          cmd_options: "-a -J zap_report.json -r zap_report.html -w zap_report.sarif"

#      - name: Install zap2sarif
#        run: pip install zap2sarif
#
#      - name: Convert ZAP JSON to SARIF
#        run: |
#          zap2sarif -i zap_report.json -o zap_report.sarif

      - name: Upload ZAP HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-html-report
          path: zap_report.html

      - name: Upload ZAP SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap_report.sarif
